rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is a manager
    function isManager() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'Manager';
    }

    // Users Collection Rules
    match /users/{userId} {
      // Any authenticated user can read any user profile (for staff lists, etc.)
      allow read: if request.auth != null;
      // Any authenticated user can create their own user profile (on first login)
      allow create: if request.auth != null;
      // Users can update their own profile, or managers can update any profile
      allow update: if request.auth != null && (request.auth.uid == userId || isManager());
      // Only managers can delete user profiles
      allow delete: if isManager();
    }

    // Units Collection Rules
    match /units/{unitId} {
      // Any authenticated user can read these
      allow read: if request.auth != null;
      // Only managers can create, update, or delete these
      allow write: if isManager();
    }

    // Job Titles Collection Rules
    match /jobTitles/{jobTitleId} {
      // Any authenticated user can read these
      allow read: if request.auth != null;
      // Only managers can create, update, or delete these
      allow write: if isManager();
    }

    // Statuses Collection Rules
    match /statuses/{statusId} {
      // Any authenticated user can read these
      allow read: if request.auth != null;
      // Only managers can create, update, or delete these
      allow write: if isManager();
    }

    // Shifts Collection Rules
    match /shifts/{shiftId} {
      // A user can read a shift if they are the assigned staff member or a manager.
      allow read: if request.auth != null && (resource.data.staffId == request.auth.uid || isManager());
      // Only managers can create shifts
      allow create: if isManager();
      // Staff can update their own shifts, or managers can update any shift
      allow update: if request.auth != null && (resource.data.staffId == request.auth.uid || isManager());
      // Only managers can delete shifts
      allow delete: if isManager();
    }

    // Staffing Levels Collection Rules
    match /staffingLevels/{levelId} {
      // Any authenticated user can read staffing levels
      allow read: if request.auth != null;
      // Only managers can create, update, or delete staffing levels
      allow write: if isManager();
    }

    // Karma Transactions Collection Rules
    match /karmaTransactions/{transactionId} {
      // Any authenticated user can read karma transactions
      allow read: if request.auth != null;
      // Allow authenticated users to create their own karma transactions, or managers to create for anyone
      allow create: if request.auth != null && (request.resource.data.staffId == request.auth.uid || isManager());
      // Karma transactions are immutable (no update or delete)
      allow update, delete: if false;
    }

    // Weekly Check-ins Collection Rules
    match /weeklyCheckins/{checkinId} {
      allow create: if request.auth != null && request.resource.data.staffId == request.auth.uid;
      allow read: if request.auth != null && (resource.data.staffId == request.auth.uid || isManager());
      allow update: if false;
      allow delete: if isManager();
    }

    // Huddle Picks Collection Rules
    match /huddlePicks/{huddlePickId} {
      // Allow authenticated users to read huddle picks
      allow read: if request.auth != null;

      // Managers can create new huddle picks
      allow create: if isManager();

      // Managers can update any huddle pick
      // Staff can update their own huddle pick to 'Pending Approval'
      allow update: if request.auth != null && (
        isManager() ||
        (request.resource.data.signedUpBy == request.auth.uid && request.resource.data.status == 'Pending Approval')
      );

      // Managers can delete huddle picks
      allow delete: if isManager();
    }

    // Open Shifts Collection Rules
    match /openShifts/{shiftId} {
      allow read: if request.auth != null;
      allow create: if isManager();
      allow update: if request.auth != null && (
        isManager() ||
        (
          // Allow staff to claim an open shift
          request.resource.data.claimStatus == 'pending' &&
          request.resource.data.claimedBy == request.auth.uid &&
          request.resource.data.claimedByName is string &&
          (resource.data.claimStatus == null || resource.data.claimStatus == 'open')
        )
      );
      allow delete: if isManager();
    }

    // Templates Collection Rules
    match /templates/{templateId} {
      allow read: if request.auth != null;
      allow write: if isManager();
    }

    // Patient Census Collection Rules
    match /patientCensus/{censusId} {
      // Any authenticated user can read patient census data
      allow read: if request.auth != null;
      // Only managers can create, update, or delete patient census data
      allow write: if isManager();
    }

    // Staffing Level Templates Collection Rules
    match /staffingLevelTemplates/{templateId} {
      // Any authenticated user can read staffing level templates
      allow read: if request.auth != null;
      // Only managers can create, update, or delete staffing level templates
      allow write: if isManager();
    }

    // Expected Census Collection Rules
    match /expectedCensus/{censusId} {
      // Any authenticated user can read expected census data
      allow read: if request.auth != null;
      // Only managers can create, update, or delete expected census data
      allow write: if isManager();
    }

    // Daily Updates Collection Rules
    match /dailyUpdates/{updateId} {
      // Any authenticated user can read daily updates
      allow read: if request.auth != null;
      // Only managers can create, update, or delete daily updates
      allow write: if isManager();
    }
  }
}